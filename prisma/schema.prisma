// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  rating        Int       @default(1200)
  accounts      Account[]
  sessions      Session[]
  
  // Group relationships
  groupUsers    GroupUser[]
  createdGroups Group[]    @relation("GroupCreator")
  
  // Learning session relationships
  playerASessions LearningSession[] @relation("PlayerA")
  playerBSessions LearningSession[] @relation("PlayerB")
  responses       Response[]
  
  // Task relationships
  createdTasks    Task[]           @relation("TaskCreator")
  taskSubmissions TaskSubmission[]
  taskVotes       TaskVote[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id              String            @id @default(uuid())
  name            String
  inviteCode      String            @unique
  creatorId       String
  creator         User              @relation("GroupCreator", fields: [creatorId], references: [id])
  groupUsers      GroupUser[]
  learningSessions LearningSession[]
  tasks           Task[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model GroupUser {
  id      String @id @default(uuid())
  groupId String
  userId  String
  role    String @default("member") // "admin", "member"
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Topic {
  id               String            @id @default(uuid())
  title            String
  description      String
  contentItems     ContentItem[]
  learningSessions LearningSession[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model LearningSession {
  id           String     @id @default(uuid())
  groupId      String
  weekStart    DateTime
  topicId      String?    // Optional for AI-generated content
  taskId       String?    // Optional for custom tasks
  playerAId    String
  playerBId    String
  playerAScore Int        @default(0)
  playerBScore Int        @default(0)
  completed    Boolean    @default(false)
  group        Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  topic        Topic?     @relation(fields: [topicId], references: [id])
  task         Task?      @relation(fields: [taskId], references: [id])
  playerA      User       @relation("PlayerA", fields: [playerAId], references: [id])
  playerB      User       @relation("PlayerB", fields: [playerBId], references: [id])
  responses    Response[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([groupId, weekStart, playerAId, playerBId])
}

model ContentItem {
  id        String     @id @default(uuid())
  topicId   String
  order     Int
  title     String
  body      String     // markdown or HTML
  topic     Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id            String     @id @default(uuid())
  contentItemId String
  prompt        String
  choices       String     // JSON string of multiple-choice options
  answerIndex   Int        // index of correct choice
  points        Int        @default(1)
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  responses     Response[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Response {
  sessionId     String
  questionId    String
  userId        String
  selected      Int
  correct       Boolean
  pointsAwarded Int
  session       LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())

  @@id([sessionId, questionId, userId])
}

// New models for enhanced task system

model Task {
  id                String            @id @default(uuid())
  groupId           String
  creatorId         String
  title             String
  description       String
  taskType          TaskType          @default(MANUAL)
  pointValue        Int               @default(10)
  dueDate           DateTime?
  requiresEvidence  Boolean           @default(false)
  evidencePrompt    String?           // "Upload a photo of your workout", "Submit your code"
  votingThreshold   Float             @default(0.6) // 60% approval needed
  votingDeadline    DateTime?
  
  // Relationships
  group             Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator           User              @relation("TaskCreator", fields: [creatorId], references: [id])
  learningSessions  LearningSession[]
  submissions       TaskSubmission[]
  
  // Auto-verifiable task content
  taskQuestions     TaskQuestion[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum TaskType {
  AUTO_QUIZ      // Multiple choice quiz
  AUTO_CODE      // Coding challenge
  MANUAL         // Requires peer verification
  HYBRID         // Combination of auto and manual elements
}

model TaskQuestion {
  id          String   @id @default(uuid())
  taskId      String
  prompt      String
  choices     String   // JSON string of options
  answerIndex Int
  points      Int      @default(1)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model TaskSubmission {
  id              String           @id @default(uuid())
  taskId          String
  userId          String
  sessionId       String?          // Optional link to learning session
  status          SubmissionStatus @default(PENDING)
  evidenceText    String?          // Written description
  evidenceUrl     String?          // File upload URL
  score           Int              @default(0)
  autoScore       Int?             // For auto-verifiable portions
  peerScore       Int?             // From peer voting
  submittedAt     DateTime         @default(now())
  
  // Relationships
  task            Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id])
  votes           TaskVote[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([taskId, userId])
}

enum SubmissionStatus {
  PENDING     // Waiting for votes
  APPROVED    // Peer-approved
  REJECTED    // Peer-rejected
  AUTO_SCORED // Automatically scored
}

model TaskVote {
  id           String         @id @default(uuid())
  submissionId String
  voterId      String
  vote         VoteType
  comment      String?
  submission   TaskSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  voter        User           @relation(fields: [voterId], references: [id])
  createdAt    DateTime       @default(now())
  
  @@unique([submissionId, voterId])
}

enum VoteType {
  APPROVE
  REJECT
  ABSTAIN
} 